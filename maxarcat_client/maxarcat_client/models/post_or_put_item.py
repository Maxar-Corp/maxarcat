# coding: utf-8

"""
    Maxar MGP Discovery API

    The Maxar MGP Discovery API implements a STAC-compliant service for searching the Maxar content catalog.  __The STAC specification is still under development.  When version 1.0 of the STAC specification is released the Discovery API will be updated to reflect any changes, some of which may not be backward compatible with this current version.__  For information on STAC see [stacspec.org](https://stacspec.org)   # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PostOrPutItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'assets': 'ItemAssets',
        'bbox': 'Bbox',
        'geometry': 'GeoJSONGeometry',
        'id': 'str',
        'links': 'list[Link]',
        'properties': 'ItemProperties',
        'stac_extensions': 'StacExtensions',
        'stac_version': 'StacVersion',
        'type': 'ItemType'
    }

    attribute_map = {
        'assets': 'assets',
        'bbox': 'bbox',
        'geometry': 'geometry',
        'id': 'id',
        'links': 'links',
        'properties': 'properties',
        'stac_extensions': 'stac_extensions',
        'stac_version': 'stac_version',
        'type': 'type'
    }

    def __init__(self, assets=None, bbox=None, geometry=None, id=None, links=None, properties=None, stac_extensions=None, stac_version=None, type=None):  # noqa: E501
        """PostOrPutItem - a model defined in Swagger"""  # noqa: E501
        self._assets = None
        self._bbox = None
        self._geometry = None
        self._id = None
        self._links = None
        self._properties = None
        self._stac_extensions = None
        self._stac_version = None
        self._type = None
        self.discriminator = None
        if assets is not None:
            self.assets = assets
        if bbox is not None:
            self.bbox = bbox
        self.geometry = geometry
        self.id = id
        if links is not None:
            self.links = links
        self.properties = properties
        if stac_extensions is not None:
            self.stac_extensions = stac_extensions
        self.stac_version = stac_version
        self.type = type

    @property
    def assets(self):
        """Gets the assets of this PostOrPutItem.  # noqa: E501


        :return: The assets of this PostOrPutItem.  # noqa: E501
        :rtype: ItemAssets
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """Sets the assets of this PostOrPutItem.


        :param assets: The assets of this PostOrPutItem.  # noqa: E501
        :type: ItemAssets
        """

        self._assets = assets

    @property
    def bbox(self):
        """Gets the bbox of this PostOrPutItem.  # noqa: E501


        :return: The bbox of this PostOrPutItem.  # noqa: E501
        :rtype: Bbox
        """
        return self._bbox

    @bbox.setter
    def bbox(self, bbox):
        """Sets the bbox of this PostOrPutItem.


        :param bbox: The bbox of this PostOrPutItem.  # noqa: E501
        :type: Bbox
        """

        self._bbox = bbox

    @property
    def geometry(self):
        """Gets the geometry of this PostOrPutItem.  # noqa: E501


        :return: The geometry of this PostOrPutItem.  # noqa: E501
        :rtype: GeoJSONGeometry
        """
        return self._geometry

    @geometry.setter
    def geometry(self, geometry):
        """Sets the geometry of this PostOrPutItem.


        :param geometry: The geometry of this PostOrPutItem.  # noqa: E501
        :type: GeoJSONGeometry
        """
        if geometry is None:
            raise ValueError("Invalid value for `geometry`, must not be `None`")  # noqa: E501

        self._geometry = geometry

    @property
    def id(self):
        """Gets the id of this PostOrPutItem.  # noqa: E501

        Provider identified unique id  # noqa: E501

        :return: The id of this PostOrPutItem.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PostOrPutItem.

        Provider identified unique id  # noqa: E501

        :param id: The id of this PostOrPutItem.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def links(self):
        """Gets the links of this PostOrPutItem.  # noqa: E501


        :return: The links of this PostOrPutItem.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this PostOrPutItem.


        :param links: The links of this PostOrPutItem.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def properties(self):
        """Gets the properties of this PostOrPutItem.  # noqa: E501


        :return: The properties of this PostOrPutItem.  # noqa: E501
        :rtype: ItemProperties
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this PostOrPutItem.


        :param properties: The properties of this PostOrPutItem.  # noqa: E501
        :type: ItemProperties
        """
        if properties is None:
            raise ValueError("Invalid value for `properties`, must not be `None`")  # noqa: E501

        self._properties = properties

    @property
    def stac_extensions(self):
        """Gets the stac_extensions of this PostOrPutItem.  # noqa: E501


        :return: The stac_extensions of this PostOrPutItem.  # noqa: E501
        :rtype: StacExtensions
        """
        return self._stac_extensions

    @stac_extensions.setter
    def stac_extensions(self, stac_extensions):
        """Sets the stac_extensions of this PostOrPutItem.


        :param stac_extensions: The stac_extensions of this PostOrPutItem.  # noqa: E501
        :type: StacExtensions
        """

        self._stac_extensions = stac_extensions

    @property
    def stac_version(self):
        """Gets the stac_version of this PostOrPutItem.  # noqa: E501


        :return: The stac_version of this PostOrPutItem.  # noqa: E501
        :rtype: StacVersion
        """
        return self._stac_version

    @stac_version.setter
    def stac_version(self, stac_version):
        """Sets the stac_version of this PostOrPutItem.


        :param stac_version: The stac_version of this PostOrPutItem.  # noqa: E501
        :type: StacVersion
        """
        if stac_version is None:
            raise ValueError("Invalid value for `stac_version`, must not be `None`")  # noqa: E501

        self._stac_version = stac_version

    @property
    def type(self):
        """Gets the type of this PostOrPutItem.  # noqa: E501


        :return: The type of this PostOrPutItem.  # noqa: E501
        :rtype: ItemType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PostOrPutItem.


        :param type: The type of this PostOrPutItem.  # noqa: E501
        :type: ItemType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostOrPutItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostOrPutItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
