# coding: utf-8

"""
    Maxar MGP Discovery API

    The Maxar MGP Discovery API implements a STAC-compliant service for searching the Maxar content catalog.  __The STAC specification is still under development.  When version 1.0 of the STAC specification is released the Discovery API will be updated to reflect any changes, some of which may not be backward compatible with this current version.__  For information on STAC see [stacspec.org](https://stacspec.org)   # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DataAccessPolicy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allow': 'list[str]',
        'deny': 'list[str]',
        'end_date': 'str',
        'name': 'str',
        'start_date': 'str'
    }

    attribute_map = {
        'allow': 'allow',
        'deny': 'deny',
        'end_date': 'end_date',
        'name': 'name',
        'start_date': 'start_date'
    }

    def __init__(self, allow=None, deny=None, end_date=None, name=None, start_date=None):  # noqa: E501
        """DataAccessPolicy - a model defined in Swagger"""  # noqa: E501
        self._allow = None
        self._deny = None
        self._end_date = None
        self._name = None
        self._start_date = None
        self.discriminator = None
        self.allow = allow
        self.deny = deny
        self.end_date = end_date
        if name is not None:
            self.name = name
        self.start_date = start_date

    @property
    def allow(self):
        """Gets the allow of this DataAccessPolicy.  # noqa: E501


        :return: The allow of this DataAccessPolicy.  # noqa: E501
        :rtype: list[str]
        """
        return self._allow

    @allow.setter
    def allow(self, allow):
        """Sets the allow of this DataAccessPolicy.


        :param allow: The allow of this DataAccessPolicy.  # noqa: E501
        :type: list[str]
        """
        if allow is None:
            raise ValueError("Invalid value for `allow`, must not be `None`")  # noqa: E501

        self._allow = allow

    @property
    def deny(self):
        """Gets the deny of this DataAccessPolicy.  # noqa: E501


        :return: The deny of this DataAccessPolicy.  # noqa: E501
        :rtype: list[str]
        """
        return self._deny

    @deny.setter
    def deny(self, deny):
        """Sets the deny of this DataAccessPolicy.


        :param deny: The deny of this DataAccessPolicy.  # noqa: E501
        :type: list[str]
        """
        if deny is None:
            raise ValueError("Invalid value for `deny`, must not be `None`")  # noqa: E501

        self._deny = deny

    @property
    def end_date(self):
        """Gets the end_date of this DataAccessPolicy.  # noqa: E501


        :return: The end_date of this DataAccessPolicy.  # noqa: E501
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this DataAccessPolicy.


        :param end_date: The end_date of this DataAccessPolicy.  # noqa: E501
        :type: str
        """
        if end_date is None:
            raise ValueError("Invalid value for `end_date`, must not be `None`")  # noqa: E501

        self._end_date = end_date

    @property
    def name(self):
        """Gets the name of this DataAccessPolicy.  # noqa: E501


        :return: The name of this DataAccessPolicy.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DataAccessPolicy.


        :param name: The name of this DataAccessPolicy.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def start_date(self):
        """Gets the start_date of this DataAccessPolicy.  # noqa: E501


        :return: The start_date of this DataAccessPolicy.  # noqa: E501
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this DataAccessPolicy.


        :param start_date: The start_date of this DataAccessPolicy.  # noqa: E501
        :type: str
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")  # noqa: E501

        self._start_date = start_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataAccessPolicy, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataAccessPolicy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
