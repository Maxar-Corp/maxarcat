# coding: utf-8

"""
    Maxar MGP Discovery API

    The Maxar MGP Discovery API implements a STAC-compliant service for searching the Maxar content catalog.  __The STAC specification is still under development.  When version 1.0 of the STAC specification is released the Discovery API will be updated to reflect any changes, some of which may not be backward compatible with this current version.__  For information on STAC see [stacspec.org](https://stacspec.org)   # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PostLink(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'body': 'PostLinkBody',
        'href': 'str',
        'merge': 'bool',
        'method': 'str',
        'rel': 'str'
    }

    attribute_map = {
        'body': 'body',
        'href': 'href',
        'merge': 'merge',
        'method': 'method',
        'rel': 'rel'
    }

    def __init__(self, body=None, href=None, merge=None, method=None, rel=None):  # noqa: E501
        """PostLink - a model defined in Swagger"""  # noqa: E501
        self._body = None
        self._href = None
        self._merge = None
        self._method = None
        self._rel = None
        self.discriminator = None
        if body is not None:
            self.body = body
        self.href = href
        if merge is not None:
            self.merge = merge
        if method is not None:
            self.method = method
        self.rel = rel

    @property
    def body(self):
        """Gets the body of this PostLink.  # noqa: E501


        :return: The body of this PostLink.  # noqa: E501
        :rtype: PostLinkBody
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this PostLink.


        :param body: The body of this PostLink.  # noqa: E501
        :type: PostLinkBody
        """

        self._body = body

    @property
    def href(self):
        """Gets the href of this PostLink.  # noqa: E501


        :return: The href of this PostLink.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this PostLink.


        :param href: The href of this PostLink.  # noqa: E501
        :type: str
        """
        if href is None:
            raise ValueError("Invalid value for `href`, must not be `None`")  # noqa: E501

        self._href = href

    @property
    def merge(self):
        """Gets the merge of this PostLink.  # noqa: E501


        :return: The merge of this PostLink.  # noqa: E501
        :rtype: bool
        """
        return self._merge

    @merge.setter
    def merge(self, merge):
        """Sets the merge of this PostLink.


        :param merge: The merge of this PostLink.  # noqa: E501
        :type: bool
        """

        self._merge = merge

    @property
    def method(self):
        """Gets the method of this PostLink.  # noqa: E501


        :return: The method of this PostLink.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this PostLink.


        :param method: The method of this PostLink.  # noqa: E501
        :type: str
        """

        self._method = method

    @property
    def rel(self):
        """Gets the rel of this PostLink.  # noqa: E501


        :return: The rel of this PostLink.  # noqa: E501
        :rtype: str
        """
        return self._rel

    @rel.setter
    def rel(self, rel):
        """Sets the rel of this PostLink.


        :param rel: The rel of this PostLink.  # noqa: E501
        :type: str
        """
        if rel is None:
            raise ValueError("Invalid value for `rel`, must not be `None`")  # noqa: E501

        self._rel = rel

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostLink, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostLink):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
