# coding: utf-8

"""
    Maxar Content API - Catalog

    The Maxar Content Catalog API implements a STAC-compliant service for searching the Maxar content catalog.  __The STAC specification is still under development.  When version 1.0 of the STAC specification is released the Content Catalog API will be updated to reflect any changes, some of which will not be backward compatible with this current version.__  For information on STAC see [stacspec.org](https://stacspec.org)   # noqa: E501

    OpenAPI spec version: 0.9
    Contact: DL-Content-Catalog@maxar.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Exception(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'message': 'str',
        'request_id': 'str'
    }

    attribute_map = {
        'message': 'message',
        'request_id': 'request_id'
    }

    def __init__(self, message=None, request_id=None):  # noqa: E501
        """Exception - a model defined in Swagger"""  # noqa: E501
        self._message = None
        self._request_id = None
        self.discriminator = None
        if message is not None:
            self.message = message
        if request_id is not None:
            self.request_id = request_id

    @property
    def message(self):
        """Gets the message of this Exception.  # noqa: E501


        :return: The message of this Exception.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Exception.


        :param message: The message of this Exception.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def request_id(self):
        """Gets the request_id of this Exception.  # noqa: E501

        UUID of web request  # noqa: E501

        :return: The request_id of this Exception.  # noqa: E501
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this Exception.

        UUID of web request  # noqa: E501

        :param request_id: The request_id of this Exception.  # noqa: E501
        :type: str
        """

        self._request_id = request_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Exception, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Exception):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
