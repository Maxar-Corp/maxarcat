# coding: utf-8

"""
    Maxar MGP Discovery API

    The Maxar MGP Discovery API implements a STAC-compliant service for searching the Maxar content catalog.  __The STAC specification is still under development.  When version 1.0 of the STAC specification is released the Discovery API will be updated to reflect any changes, some of which may not be backward compatible with this current version.__  For information on STAC see [stacspec.org](https://stacspec.org)   # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class QueryablesProperties(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'additional_properties': 'QueryablesAdditionalProperties',
        'collection': 'QueryablesProperty',
        'search_datetime': 'QueryablesProperty',
        'geometry': 'QueryablesProperty',
        'id': 'QueryablesProperty'
    }

    attribute_map = {
        'additional_properties': 'additionalProperties',
        'collection': 'collection',
        'search_datetime': 'datetime',
        'geometry': 'geometry',
        'id': 'id'
    }

    def __init__(self, additional_properties=None, collection=None, search_datetime=None, geometry=None, id=None):  # noqa: E501
        """QueryablesProperties - a model defined in Swagger"""  # noqa: E501
        self._additional_properties = None
        self._collection = None
        self._search_datetime = None
        self._geometry = None
        self._id = None
        self.discriminator = None
        if additional_properties is not None:
            self.additional_properties = additional_properties
        if collection is not None:
            self.collection = collection
        if search_datetime is not None:
            self.search_datetime = search_datetime
        if geometry is not None:
            self.geometry = geometry
        if id is not None:
            self.id = id

    @property
    def additional_properties(self):
        """Gets the additional_properties of this QueryablesProperties.  # noqa: E501


        :return: The additional_properties of this QueryablesProperties.  # noqa: E501
        :rtype: QueryablesAdditionalProperties
        """
        return self._additional_properties

    @additional_properties.setter
    def additional_properties(self, additional_properties):
        """Sets the additional_properties of this QueryablesProperties.


        :param additional_properties: The additional_properties of this QueryablesProperties.  # noqa: E501
        :type: QueryablesAdditionalProperties
        """

        self._additional_properties = additional_properties

    @property
    def collection(self):
        """Gets the collection of this QueryablesProperties.  # noqa: E501


        :return: The collection of this QueryablesProperties.  # noqa: E501
        :rtype: QueryablesProperty
        """
        return self._collection

    @collection.setter
    def collection(self, collection):
        """Sets the collection of this QueryablesProperties.


        :param collection: The collection of this QueryablesProperties.  # noqa: E501
        :type: QueryablesProperty
        """

        self._collection = collection

    @property
    def search_datetime(self):
        """Gets the search_datetime of this QueryablesProperties.  # noqa: E501


        :return: The search_datetime of this QueryablesProperties.  # noqa: E501
        :rtype: QueryablesProperty
        """
        return self._search_datetime

    @search_datetime.setter
    def search_datetime(self, search_datetime):
        """Sets the search_datetime of this QueryablesProperties.


        :param search_datetime: The search_datetime of this QueryablesProperties.  # noqa: E501
        :type: QueryablesProperty
        """

        self._search_datetime = search_datetime

    @property
    def geometry(self):
        """Gets the geometry of this QueryablesProperties.  # noqa: E501


        :return: The geometry of this QueryablesProperties.  # noqa: E501
        :rtype: QueryablesProperty
        """
        return self._geometry

    @geometry.setter
    def geometry(self, geometry):
        """Sets the geometry of this QueryablesProperties.


        :param geometry: The geometry of this QueryablesProperties.  # noqa: E501
        :type: QueryablesProperty
        """

        self._geometry = geometry

    @property
    def id(self):
        """Gets the id of this QueryablesProperties.  # noqa: E501


        :return: The id of this QueryablesProperties.  # noqa: E501
        :rtype: QueryablesProperty
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this QueryablesProperties.


        :param id: The id of this QueryablesProperties.  # noqa: E501
        :type: QueryablesProperty
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QueryablesProperties, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QueryablesProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
