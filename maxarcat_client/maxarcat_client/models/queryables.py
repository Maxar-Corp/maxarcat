# coding: utf-8

"""
    Maxar MGP Discovery API

    The Maxar MGP Discovery API implements a STAC-compliant service for searching the Maxar content catalog.  __The STAC specification is still under development.  When version 1.0 of the STAC specification is released the Discovery API will be updated to reflect any changes, some of which may not be backward compatible with this current version.__  For information on STAC see [stacspec.org](https://stacspec.org)   # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Queryables(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'QueryablesId',
        'schema': 'QueryablesSchema',
        'description': 'QueryablesDescription',
        'properties': 'QueryablesProperties',
        'title': 'QueryablesTitle',
        'type': 'QueryablesType'
    }

    attribute_map = {
        'id': '$id',
        'schema': '$schema',
        'description': 'description',
        'properties': 'properties',
        'title': 'title',
        'type': 'type'
    }

    def __init__(self, id=None, schema=None, description=None, properties=None, title=None, type=None):  # noqa: E501
        """Queryables - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._schema = None
        self._description = None
        self._properties = None
        self._title = None
        self._type = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if schema is not None:
            self.schema = schema
        if description is not None:
            self.description = description
        if properties is not None:
            self.properties = properties
        if title is not None:
            self.title = title
        if type is not None:
            self.type = type

    @property
    def id(self):
        """Gets the id of this Queryables.  # noqa: E501


        :return: The id of this Queryables.  # noqa: E501
        :rtype: QueryablesId
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Queryables.


        :param id: The id of this Queryables.  # noqa: E501
        :type: QueryablesId
        """

        self._id = id

    @property
    def schema(self):
        """Gets the schema of this Queryables.  # noqa: E501


        :return: The schema of this Queryables.  # noqa: E501
        :rtype: QueryablesSchema
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this Queryables.


        :param schema: The schema of this Queryables.  # noqa: E501
        :type: QueryablesSchema
        """

        self._schema = schema

    @property
    def description(self):
        """Gets the description of this Queryables.  # noqa: E501


        :return: The description of this Queryables.  # noqa: E501
        :rtype: QueryablesDescription
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Queryables.


        :param description: The description of this Queryables.  # noqa: E501
        :type: QueryablesDescription
        """

        self._description = description

    @property
    def properties(self):
        """Gets the properties of this Queryables.  # noqa: E501


        :return: The properties of this Queryables.  # noqa: E501
        :rtype: QueryablesProperties
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this Queryables.


        :param properties: The properties of this Queryables.  # noqa: E501
        :type: QueryablesProperties
        """

        self._properties = properties

    @property
    def title(self):
        """Gets the title of this Queryables.  # noqa: E501


        :return: The title of this Queryables.  # noqa: E501
        :rtype: QueryablesTitle
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Queryables.


        :param title: The title of this Queryables.  # noqa: E501
        :type: QueryablesTitle
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this Queryables.  # noqa: E501


        :return: The type of this Queryables.  # noqa: E501
        :rtype: QueryablesType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Queryables.


        :param type: The type of this Queryables.  # noqa: E501
        :type: QueryablesType
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Queryables, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Queryables):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
