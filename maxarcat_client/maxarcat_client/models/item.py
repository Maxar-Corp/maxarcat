# coding: utf-8

"""
    Maxar Content API - Catalog

    The Maxar Content Catalog API implements a STAC-compliant service for searching the Maxar content catalog.  __The STAC specification is still under development.  When version 1.0 of the STAC specification is released the Content Catalog API will be updated to reflect any changes, some of which will not be backward compatible with this current version.__  For information on STAC see [stacspec.org](https://stacspec.org)   # noqa: E501

    OpenAPI spec version: 0.9
    Contact: DL-Content-Catalog@maxar.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Item(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'ItemId',
        'collection': 'CollectionId',
        'bbox': 'Bbox',
        'geometry': 'object',
        'type': 'ItemType',
        'properties': 'ItemProperties',
        'links': 'Links',
        'assets': 'ItemAssets'
    }

    attribute_map = {
        'id': 'id',
        'collection': 'collection',
        'bbox': 'bbox',
        'geometry': 'geometry',
        'type': 'type',
        'properties': 'properties',
        'links': 'links',
        'assets': 'assets'
    }

    def __init__(self, id=None, collection=None, bbox=None, geometry=None, type=None, properties=None, links=None, assets=None):  # noqa: E501
        """Item - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._collection = None
        self._bbox = None
        self._geometry = None
        self._type = None
        self._properties = None
        self._links = None
        self._assets = None
        self.discriminator = None
        self.id = id
        self.collection = collection
        self.bbox = bbox
        self.geometry = geometry
        self.type = type
        self.properties = properties
        self.links = links
        self.assets = assets

    @property
    def id(self):
        """Gets the id of this Item.  # noqa: E501


        :return: The id of this Item.  # noqa: E501
        :rtype: ItemId
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Item.


        :param id: The id of this Item.  # noqa: E501
        :type: ItemId
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def collection(self):
        """Gets the collection of this Item.  # noqa: E501


        :return: The collection of this Item.  # noqa: E501
        :rtype: CollectionId
        """
        return self._collection

    @collection.setter
    def collection(self, collection):
        """Sets the collection of this Item.


        :param collection: The collection of this Item.  # noqa: E501
        :type: CollectionId
        """
        if collection is None:
            raise ValueError("Invalid value for `collection`, must not be `None`")  # noqa: E501

        self._collection = collection

    @property
    def bbox(self):
        """Gets the bbox of this Item.  # noqa: E501


        :return: The bbox of this Item.  # noqa: E501
        :rtype: Bbox
        """
        return self._bbox

    @bbox.setter
    def bbox(self, bbox):
        """Sets the bbox of this Item.


        :param bbox: The bbox of this Item.  # noqa: E501
        :type: Bbox
        """
        if bbox is None:
            raise ValueError("Invalid value for `bbox`, must not be `None`")  # noqa: E501

        self._bbox = bbox

    @property
    def geometry(self):
        """Gets the geometry of this Item.  # noqa: E501


        :return: The geometry of this Item.  # noqa: E501
        :rtype: object
        """
        return self._geometry

    @geometry.setter
    def geometry(self, geometry):
        """Sets the geometry of this Item.


        :param geometry: The geometry of this Item.  # noqa: E501
        :type: object
        """
        if geometry is None:
            raise ValueError("Invalid value for `geometry`, must not be `None`")  # noqa: E501

        self._geometry = geometry

    @property
    def type(self):
        """Gets the type of this Item.  # noqa: E501


        :return: The type of this Item.  # noqa: E501
        :rtype: ItemType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Item.


        :param type: The type of this Item.  # noqa: E501
        :type: ItemType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def properties(self):
        """Gets the properties of this Item.  # noqa: E501


        :return: The properties of this Item.  # noqa: E501
        :rtype: ItemProperties
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this Item.


        :param properties: The properties of this Item.  # noqa: E501
        :type: ItemProperties
        """
        if properties is None:
            raise ValueError("Invalid value for `properties`, must not be `None`")  # noqa: E501

        self._properties = properties

    @property
    def links(self):
        """Gets the links of this Item.  # noqa: E501


        :return: The links of this Item.  # noqa: E501
        :rtype: Links
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Item.


        :param links: The links of this Item.  # noqa: E501
        :type: Links
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")  # noqa: E501

        self._links = links

    @property
    def assets(self):
        """Gets the assets of this Item.  # noqa: E501


        :return: The assets of this Item.  # noqa: E501
        :rtype: ItemAssets
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """Sets the assets of this Item.


        :param assets: The assets of this Item.  # noqa: E501
        :type: ItemAssets
        """
        if assets is None:
            raise ValueError("Invalid value for `assets`, must not be `None`")  # noqa: E501

        self._assets = assets

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Item, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Item):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
