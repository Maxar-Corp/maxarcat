# coding: utf-8

"""
    Maxar MGP Discovery API

    The Maxar MGP Discovery API implements a STAC-compliant service for searching the Maxar content catalog.  __The STAC specification is still under development.  When version 1.0 of the STAC specification is released the Discovery API will be updated to reflect any changes, some of which may not be backward compatible with this current version.__  For information on STAC see [stacspec.org](https://stacspec.org)   # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from maxarcat_client.api_client import ApiClient


class MAXAREXTENSIONIMAGEGRIDApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_image_grid(self, **kwargs):  # noqa: E501
        """Search STAC items with filtering and return tiles.  # noqa: E501

        Retrieve items matching filters.  For authorization this method requires the use of a valid bearer token.  The GET /service/imagegrid/search operation supports the same search filter parameters as POST /service/imagegrid/search.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_image_grid(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bbox: Bounding box in format \"west,south,east,north\" in WGS84 decimal degrees. When performing a spatial search specify either of the parameters \"bbox\" or \"intersects\", but not both. 
        :param str search_datetime: Date range filter in format \"start-date/end-date\" or \"exact-datetime\"
        :param str ids: Comma-separated list of STAC item IDs to return.  The items returned are still subject to whatever other search filters are specified. 
        :param str collections: Comma-separated list of collections to search in.  By default all imagery collections are searched.  It is an error if any collection in this list is not an imagery collection. 
        :param str intersects: GeoJSON geometry to search by.  Must be either a Polygon or MultiPolygon geometry.  Only STAC items whose geometries intersect this geometry are selected.  When performing a spatial search specify either of the parameters \"bbox\" or \"intersects\", but not both. 
        :param str filter: A cql2-text filter expression for filtering items. You can filter on any property inside a STAC item's \"properties\" object.  While STAC items have a \"datetime\" property you should use the search operation's \"datetime\" parameter for searching by it, and not use the \"filter\" parameter for searching by datetime. 
        :param int limit: Maximum number of items to return
        :param str last: STAC item ID of last tile returned in previous page.  Next page of results will begin with tile after this one. 
        :return: ItemCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_image_grid_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_image_grid_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_image_grid_with_http_info(self, **kwargs):  # noqa: E501
        """Search STAC items with filtering and return tiles.  # noqa: E501

        Retrieve items matching filters.  For authorization this method requires the use of a valid bearer token.  The GET /service/imagegrid/search operation supports the same search filter parameters as POST /service/imagegrid/search.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_image_grid_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bbox: Bounding box in format \"west,south,east,north\" in WGS84 decimal degrees. When performing a spatial search specify either of the parameters \"bbox\" or \"intersects\", but not both. 
        :param str search_datetime: Date range filter in format \"start-date/end-date\" or \"exact-datetime\"
        :param str ids: Comma-separated list of STAC item IDs to return.  The items returned are still subject to whatever other search filters are specified. 
        :param str collections: Comma-separated list of collections to search in.  By default all imagery collections are searched.  It is an error if any collection in this list is not an imagery collection. 
        :param str intersects: GeoJSON geometry to search by.  Must be either a Polygon or MultiPolygon geometry.  Only STAC items whose geometries intersect this geometry are selected.  When performing a spatial search specify either of the parameters \"bbox\" or \"intersects\", but not both. 
        :param str filter: A cql2-text filter expression for filtering items. You can filter on any property inside a STAC item's \"properties\" object.  While STAC items have a \"datetime\" property you should use the search operation's \"datetime\" parameter for searching by it, and not use the \"filter\" parameter for searching by datetime. 
        :param int limit: Maximum number of items to return
        :param str last: STAC item ID of last tile returned in previous page.  Next page of results will begin with tile after this one. 
        :return: ItemCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bbox', 'search_datetime', 'ids', 'collections', 'intersects', 'filter', 'limit', 'last']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_image_grid" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'bbox' in params:
            query_params.append(('bbox', params['bbox']))  # noqa: E501
        if 'search_datetime' in params:
            query_params.append(('datetime', params['search_datetime']))  # noqa: E501
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
        if 'collections' in params:
            query_params.append(('collections', params['collections']))  # noqa: E501
        if 'intersects' in params:
            query_params.append(('intersects', params['intersects']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'last' in params:
            query_params.append(('last', params['last']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/geo+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/services/imagegrid/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ItemCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_image_grid_item(self, item_id, **kwargs):  # noqa: E501
        """Get a gridded tile by its STAC item ID  # noqa: E501

        For authorization this method requires the use of a valid bearer token.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_image_grid_item(item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str item_id: STAC item ID (required)
        :return: Item
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_image_grid_item_with_http_info(item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_image_grid_item_with_http_info(item_id, **kwargs)  # noqa: E501
            return data

    def get_image_grid_item_with_http_info(self, item_id, **kwargs):  # noqa: E501
        """Get a gridded tile by its STAC item ID  # noqa: E501

        For authorization this method requires the use of a valid bearer token.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_image_grid_item_with_http_info(item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str item_id: STAC item ID (required)
        :return: Item
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_image_grid_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `get_image_grid_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'item_id' in params:
            path_params['itemId'] = params['item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/geo+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/services/imagegrid/items/{itemId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Item',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_image_grid(self, **kwargs):  # noqa: E501
        """Search STAC items with filtering and return tiles.  # noqa: E501

        Retrieve items matching filters.  For authorization this method requires the use of a valid bearer token.  The GET /service/imagegrid/search operation supports the same search filter parameters as POST /service/imagegrid/search.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_image_grid(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SearchBody body:
        :return: ItemCollectionPost
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_image_grid_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_image_grid_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_image_grid_with_http_info(self, **kwargs):  # noqa: E501
        """Search STAC items with filtering and return tiles.  # noqa: E501

        Retrieve items matching filters.  For authorization this method requires the use of a valid bearer token.  The GET /service/imagegrid/search operation supports the same search filter parameters as POST /service/imagegrid/search.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_image_grid_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SearchBody body:
        :return: ItemCollectionPost
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_image_grid" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/geo+json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/services/imagegrid/search', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ItemCollectionPost',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
