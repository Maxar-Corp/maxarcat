# coding: utf-8

"""
    Maxar Content API - Catalog

    The Maxar Content Catalog API implements a STAC-compliant service for searching the Maxar content catalog.  __The STAC specification is still under development.  When version 1.0 of the STAC specification is released the Content Catalog API will be updated to reflect any changes, some of which will not be backward compatible with this current version.__  For information on STAC see [stacspec.org](https://stacspec.org)   # noqa: E501

    OpenAPI spec version: 0.9
    Contact: DL-Content-Catalog@maxar.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from maxarcat_client.api_client import ApiClient


class STACApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_healthcheck(self, **kwargs):  # noqa: E501
        """Service healthcheck  # noqa: E501

        Return the service's health and the health of each of its dependent services.  For authorization this method requires the use of a valid bearer token.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_healthcheck(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Healthcheck
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_healthcheck_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_healthcheck_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_healthcheck_with_http_info(self, **kwargs):  # noqa: E501
        """Service healthcheck  # noqa: E501

        Return the service's health and the health of each of its dependent services.  For authorization this method requires the use of a valid bearer token.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_healthcheck_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Healthcheck
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_healthcheck" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/healthcheck', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Healthcheck',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_root(self, **kwargs):  # noqa: E501
        """Return the root catalog or collection.  # noqa: E501

        This method is currently unimplemented.  It returns status 200 with JSON content of an empty dictionary.  Returns the root STAC Catalog or STAC Collection that is the entry point for users to browse with STAC Browser or for search engines to crawl. This can either return a single STAC Collection or more commonly a STAC catalog that usually lists sub-catalogs of STAC Collections, i.e. a simple catalog that lists all collections available through the API.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_root(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: LandingPage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_root_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_root_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_root_with_http_info(self, **kwargs):  # noqa: E501
        """Return the root catalog or collection.  # noqa: E501

        This method is currently unimplemented.  It returns status 200 with JSON content of an empty dictionary.  Returns the root STAC Catalog or STAC Collection that is the entry point for users to browse with STAC Browser or for search engines to crawl. This can either return a single STAC Collection or more commonly a STAC catalog that usually lists sub-catalogs of STAC Collections, i.e. a simple catalog that lists all collections available through the API.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_root_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: LandingPage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_root" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LandingPage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_search_stac(self, **kwargs):  # noqa: E501
        """Search STAC items with filtering.  # noqa: E501

        Retrieve items matching filters.  For authorization this method requires the use of a valid bearer token.  The GET /search operation supports the same search filter parameters as POST /search.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_search_stac(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bbox: Bounding box in format \"west,south,east,north\" in WGS84 decimal degrees. When performing a spatial search specify either of the parameters \"bbox\" of \"intesects\", but not both. 
        :param str search_datetime: Date range filter in format \"start-date/end-date\"
        :param str ids: Comma-separated list of STAC item IDs to return.  The items returned are still subject to whatever other search filters are specified. 
        :param str collections: Comma-separated list of collections to search in.  If this parameter is not specified then items in all collections are searched. 
        :param str intersects: GeoJSON geometry to search by.  Only STAC items whose geometries intersect this geometry are selected. When performing a spatial search specify either of the parameters \"bbox\" of \"intesects\", but not both. 
        :param str where: SQL-style WHERE clause for filtering STAC items by properties.  You can filter on any property inside a STAC item's \"properties\" object.  While STAC items have a \"datetime\" property you should use the search operation's \"datetime\" parameter for searching by it, and not use the \"where\" parameter for searching by datetime. 
        :param str orderby: SQL-style ORDER BY clause.  The only properties results can be ordered by are \"id\" and \"datetime\". You can use ASC and DESC modifiers on each column.  If not specified then orderby defaults to \"datetime DESC, id ASC\". 
        :param int limit: Maximum number of items to return
        :param int page: Page number to retrieve.  First page is numbered 1. 
        :return: ItemCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_search_stac_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_search_stac_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_search_stac_with_http_info(self, **kwargs):  # noqa: E501
        """Search STAC items with filtering.  # noqa: E501

        Retrieve items matching filters.  For authorization this method requires the use of a valid bearer token.  The GET /search operation supports the same search filter parameters as POST /search.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_search_stac_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bbox: Bounding box in format \"west,south,east,north\" in WGS84 decimal degrees. When performing a spatial search specify either of the parameters \"bbox\" of \"intesects\", but not both. 
        :param str search_datetime: Date range filter in format \"start-date/end-date\"
        :param str ids: Comma-separated list of STAC item IDs to return.  The items returned are still subject to whatever other search filters are specified. 
        :param str collections: Comma-separated list of collections to search in.  If this parameter is not specified then items in all collections are searched. 
        :param str intersects: GeoJSON geometry to search by.  Only STAC items whose geometries intersect this geometry are selected. When performing a spatial search specify either of the parameters \"bbox\" of \"intesects\", but not both. 
        :param str where: SQL-style WHERE clause for filtering STAC items by properties.  You can filter on any property inside a STAC item's \"properties\" object.  While STAC items have a \"datetime\" property you should use the search operation's \"datetime\" parameter for searching by it, and not use the \"where\" parameter for searching by datetime. 
        :param str orderby: SQL-style ORDER BY clause.  The only properties results can be ordered by are \"id\" and \"datetime\". You can use ASC and DESC modifiers on each column.  If not specified then orderby defaults to \"datetime DESC, id ASC\". 
        :param int limit: Maximum number of items to return
        :param int page: Page number to retrieve.  First page is numbered 1. 
        :return: ItemCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bbox', 'search_datetime', 'ids', 'collections', 'intersects', 'where', 'orderby', 'limit', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_search_stac" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'bbox' in params:
            query_params.append(('bbox', params['bbox']))  # noqa: E501
        if 'search_datetime' in params:
            query_params.append(('datetime', params['search_datetime']))  # noqa: E501
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
        if 'collections' in params:
            query_params.append(('collections', params['collections']))  # noqa: E501
        if 'intersects' in params:
            query_params.append(('intersects', params['intersects']))  # noqa: E501
        if 'where' in params:
            query_params.append(('where', params['where']))  # noqa: E501
        if 'orderby' in params:
            query_params.append(('orderby', params['orderby']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/geo+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ItemCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_search_stac(self, **kwargs):  # noqa: E501
        """Search STAC items with full-featured filtering.  # noqa: E501

        Retrieve items matching filters. Intended as the standard, full-featured query API.  For authorization this method requires the use of a valid bearer token.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_search_stac(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SearchBody body:
        :return: ItemCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_search_stac_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_search_stac_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_search_stac_with_http_info(self, **kwargs):  # noqa: E501
        """Search STAC items with full-featured filtering.  # noqa: E501

        Retrieve items matching filters. Intended as the standard, full-featured query API.  For authorization this method requires the use of a valid bearer token.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_search_stac_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SearchBody body:
        :return: ItemCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_search_stac" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/geo+json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/search', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ItemCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
