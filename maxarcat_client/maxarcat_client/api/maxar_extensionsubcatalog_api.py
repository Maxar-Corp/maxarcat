# coding: utf-8

"""
    Maxar MGP Discovery API

    The Maxar MGP Discovery API implements a STAC-compliant service for searching the Maxar content catalog.  __The STAC specification is still under development.  When version 1.0 of the STAC specification is released the Discovery API will be updated to reflect any changes, some of which may not be backward compatible with this current version.__  For information on STAC see [stacspec.org](https://stacspec.org)   # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from maxarcat_client.api_client import ApiClient


class MAXAREXTENSIONSUBCATALOGApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_sub_catalog(self, sub_catalog_id, **kwargs):  # noqa: E501
        """Get sub-catalog definition  # noqa: E501

        View the definition of a Maxar Sub-Catalog   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sub_catalog(sub_catalog_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sub_catalog_id: Identifier (name) of a specific collection (required)
        :return: Collection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sub_catalog_with_http_info(sub_catalog_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sub_catalog_with_http_info(sub_catalog_id, **kwargs)  # noqa: E501
            return data

    def get_sub_catalog_with_http_info(self, sub_catalog_id, **kwargs):  # noqa: E501
        """Get sub-catalog definition  # noqa: E501

        View the definition of a Maxar Sub-Catalog   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sub_catalog_with_http_info(sub_catalog_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sub_catalog_id: Identifier (name) of a specific collection (required)
        :return: Collection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sub_catalog_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sub_catalog" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sub_catalog_id' is set
        if ('sub_catalog_id' not in params or
                params['sub_catalog_id'] is None):
            raise ValueError("Missing the required parameter `sub_catalog_id` when calling `get_sub_catalog`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sub_catalog_id' in params:
            path_params['subCatalogId'] = params['sub_catalog_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/catalogs/{subCatalogId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Collection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sub_catalog_collection(self, sub_catalog_id, collection_id, **kwargs):  # noqa: E501
        """Get Collection in a Sub-Catalog  # noqa: E501

        View the definition of a collection that belongs to a Sub-Catalog   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sub_catalog_collection(sub_catalog_id, collection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sub_catalog_id: Identifier (name) of a specific collection (required)
        :param str collection_id: Identifier (name) of a specific collection (required)
        :return: Collection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sub_catalog_collection_with_http_info(sub_catalog_id, collection_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sub_catalog_collection_with_http_info(sub_catalog_id, collection_id, **kwargs)  # noqa: E501
            return data

    def get_sub_catalog_collection_with_http_info(self, sub_catalog_id, collection_id, **kwargs):  # noqa: E501
        """Get Collection in a Sub-Catalog  # noqa: E501

        View the definition of a collection that belongs to a Sub-Catalog   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sub_catalog_collection_with_http_info(sub_catalog_id, collection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sub_catalog_id: Identifier (name) of a specific collection (required)
        :param str collection_id: Identifier (name) of a specific collection (required)
        :return: Collection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sub_catalog_id', 'collection_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sub_catalog_collection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sub_catalog_id' is set
        if ('sub_catalog_id' not in params or
                params['sub_catalog_id'] is None):
            raise ValueError("Missing the required parameter `sub_catalog_id` when calling `get_sub_catalog_collection`")  # noqa: E501
        # verify the required parameter 'collection_id' is set
        if ('collection_id' not in params or
                params['collection_id'] is None):
            raise ValueError("Missing the required parameter `collection_id` when calling `get_sub_catalog_collection`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sub_catalog_id' in params:
            path_params['subCatalogId'] = params['sub_catalog_id']  # noqa: E501
        if 'collection_id' in params:
            path_params['collectionId'] = params['collection_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/catalogs/{subCatalogId}/collections/{collectionId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Collection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sub_catalog_item(self, sub_catalog_id, collection_id, item_id, **kwargs):  # noqa: E501
        """Get Sub-Catalog STAC Item  # noqa: E501

        Get a stac item in a sub-catalog's collection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sub_catalog_item(sub_catalog_id, collection_id, item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sub_catalog_id: Identifier (name) of a specific collection (required)
        :param str collection_id: Identifier (name) of a specific collection (required)
        :param str item_id: STAC item ID (required)
        :return: Item
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sub_catalog_item_with_http_info(sub_catalog_id, collection_id, item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sub_catalog_item_with_http_info(sub_catalog_id, collection_id, item_id, **kwargs)  # noqa: E501
            return data

    def get_sub_catalog_item_with_http_info(self, sub_catalog_id, collection_id, item_id, **kwargs):  # noqa: E501
        """Get Sub-Catalog STAC Item  # noqa: E501

        Get a stac item in a sub-catalog's collection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sub_catalog_item_with_http_info(sub_catalog_id, collection_id, item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sub_catalog_id: Identifier (name) of a specific collection (required)
        :param str collection_id: Identifier (name) of a specific collection (required)
        :param str item_id: STAC item ID (required)
        :return: Item
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sub_catalog_id', 'collection_id', 'item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sub_catalog_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sub_catalog_id' is set
        if ('sub_catalog_id' not in params or
                params['sub_catalog_id'] is None):
            raise ValueError("Missing the required parameter `sub_catalog_id` when calling `get_sub_catalog_item`")  # noqa: E501
        # verify the required parameter 'collection_id' is set
        if ('collection_id' not in params or
                params['collection_id'] is None):
            raise ValueError("Missing the required parameter `collection_id` when calling `get_sub_catalog_item`")  # noqa: E501
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `get_sub_catalog_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sub_catalog_id' in params:
            path_params['subCatalogId'] = params['sub_catalog_id']  # noqa: E501
        if 'collection_id' in params:
            path_params['collectionId'] = params['collection_id']  # noqa: E501
        if 'item_id' in params:
            path_params['itemId'] = params['item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/geo+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/catalogs/{subCatalogId}/collections/{collectionId}/items/{itemId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Item',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sub_catalog_search(self, sub_catalog_id, **kwargs):  # noqa: E501
        """Search Sub-Catalog STAC items with filtering.  # noqa: E501

        Retrieve items matching filters in a sub-catalog. The GET /search operation supports the same search filter parameters as POST /search.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sub_catalog_search(sub_catalog_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sub_catalog_id: Identifier (name) of a specific collection (required)
        :param str bbox: Bounding box in format \"west,south,east,north\" in WGS84 decimal degrees. When performing a spatial search specify either of the parameters \"bbox\" of \"intesects\", but not both. 
        :param str search_datetime: Date range filter in format \"start-date/end-date\" or \"exact-datetime\"
        :param str ids: Comma-separated list of STAC item IDs to return.  The items returned are still subject to whatever other search filters are specified. 
        :param str collections: Comma-separated list of collections to search in.  If this parameter is not specified then items in all collections are searched. 
        :param str intersects: GeoJSON geometry to search by.  Only STAC items whose geometries intersect this geometry are selected. When performing a spatial search specify either of the parameters \"bbox\" of \"intesects\", but not both. 
        :param str filter: A cql2-text filter expression for filtering items. You can filter on any property inside a STAC item's \"properties\" object.  While STAC items have a \"datetime\" property you should use the search operation's \"datetime\" parameter for searching by it, and not use the \"filter\" parameter for searching by datetime. 
        :param str sortby: An array of property names, prefixed by either \"+\" for ascending or \"-\" for descending. If no prefix is provided, \"+\" is assumed. 
        :param int limit: Maximum number of items to return
        :param int page: Page number to retrieve.  First page is numbered 1. 
        :return: ItemCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sub_catalog_search_with_http_info(sub_catalog_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sub_catalog_search_with_http_info(sub_catalog_id, **kwargs)  # noqa: E501
            return data

    def get_sub_catalog_search_with_http_info(self, sub_catalog_id, **kwargs):  # noqa: E501
        """Search Sub-Catalog STAC items with filtering.  # noqa: E501

        Retrieve items matching filters in a sub-catalog. The GET /search operation supports the same search filter parameters as POST /search.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sub_catalog_search_with_http_info(sub_catalog_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sub_catalog_id: Identifier (name) of a specific collection (required)
        :param str bbox: Bounding box in format \"west,south,east,north\" in WGS84 decimal degrees. When performing a spatial search specify either of the parameters \"bbox\" of \"intesects\", but not both. 
        :param str search_datetime: Date range filter in format \"start-date/end-date\" or \"exact-datetime\"
        :param str ids: Comma-separated list of STAC item IDs to return.  The items returned are still subject to whatever other search filters are specified. 
        :param str collections: Comma-separated list of collections to search in.  If this parameter is not specified then items in all collections are searched. 
        :param str intersects: GeoJSON geometry to search by.  Only STAC items whose geometries intersect this geometry are selected. When performing a spatial search specify either of the parameters \"bbox\" of \"intesects\", but not both. 
        :param str filter: A cql2-text filter expression for filtering items. You can filter on any property inside a STAC item's \"properties\" object.  While STAC items have a \"datetime\" property you should use the search operation's \"datetime\" parameter for searching by it, and not use the \"filter\" parameter for searching by datetime. 
        :param str sortby: An array of property names, prefixed by either \"+\" for ascending or \"-\" for descending. If no prefix is provided, \"+\" is assumed. 
        :param int limit: Maximum number of items to return
        :param int page: Page number to retrieve.  First page is numbered 1. 
        :return: ItemCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sub_catalog_id', 'bbox', 'search_datetime', 'ids', 'collections', 'intersects', 'filter', 'sortby', 'limit', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sub_catalog_search" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sub_catalog_id' is set
        if ('sub_catalog_id' not in params or
                params['sub_catalog_id'] is None):
            raise ValueError("Missing the required parameter `sub_catalog_id` when calling `get_sub_catalog_search`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sub_catalog_id' in params:
            path_params['subCatalogId'] = params['sub_catalog_id']  # noqa: E501

        query_params = []
        if 'bbox' in params:
            query_params.append(('bbox', params['bbox']))  # noqa: E501
        if 'search_datetime' in params:
            query_params.append(('datetime', params['search_datetime']))  # noqa: E501
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
        if 'collections' in params:
            query_params.append(('collections', params['collections']))  # noqa: E501
        if 'intersects' in params:
            query_params.append(('intersects', params['intersects']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sortby' in params:
            query_params.append(('sortby', params['sortby']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/geo+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/catalogs/{subCatalogId}/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ItemCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_sub_catalog_collection_items(self, sub_catalog_id, collection_id, **kwargs):  # noqa: E501
        """List Items in a Sub-Catalog's collection  # noqa: E501

        List items that are in a collection. The same query parameters may be used as those in the /search endpoint, except for \"collections\" since the collection to search is part of the URL path.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_sub_catalog_collection_items(sub_catalog_id, collection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sub_catalog_id: Identifier (name) of a specific collection (required)
        :param str collection_id: Identifier (name) of a specific collection (required)
        :param str bbox: Bounding box in format \"west,south,east,north\" in WGS84 decimal degrees. When performing a spatial search specify either of the parameters \"bbox\" of \"intesects\", but not both. 
        :param str search_datetime: Date range filter in format \"start-date/end-date\" or \"exact-datetime\"
        :param str ids: Comma-separated list of STAC item IDs to return.  The items returned are still subject to whatever other search filters are specified. 
        :param str intersects: GeoJSON geometry to search by.  Only STAC items whose geometries intersect this geometry are selected. When performing a spatial search specify either of the parameters \"bbox\" of \"intesects\", but not both. 
        :param str filter: A cql2-text filter expression for filtering items. You can filter on any property inside a STAC item's \"properties\" object.  While STAC items have a \"datetime\" property you should use the search operation's \"datetime\" parameter for searching by it, and not use the \"filter\" parameter for searching by datetime. 
        :param str sortby: An array of property names, prefixed by either \"+\" for ascending or \"-\" for descending. If no prefix is provided, \"+\" is assumed. 
        :param int limit: Maximum number of items to return
        :param int page: Page number to retrieve.  First page is numbered 1. 
        :return: ItemCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_sub_catalog_collection_items_with_http_info(sub_catalog_id, collection_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_sub_catalog_collection_items_with_http_info(sub_catalog_id, collection_id, **kwargs)  # noqa: E501
            return data

    def list_sub_catalog_collection_items_with_http_info(self, sub_catalog_id, collection_id, **kwargs):  # noqa: E501
        """List Items in a Sub-Catalog's collection  # noqa: E501

        List items that are in a collection. The same query parameters may be used as those in the /search endpoint, except for \"collections\" since the collection to search is part of the URL path.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_sub_catalog_collection_items_with_http_info(sub_catalog_id, collection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sub_catalog_id: Identifier (name) of a specific collection (required)
        :param str collection_id: Identifier (name) of a specific collection (required)
        :param str bbox: Bounding box in format \"west,south,east,north\" in WGS84 decimal degrees. When performing a spatial search specify either of the parameters \"bbox\" of \"intesects\", but not both. 
        :param str search_datetime: Date range filter in format \"start-date/end-date\" or \"exact-datetime\"
        :param str ids: Comma-separated list of STAC item IDs to return.  The items returned are still subject to whatever other search filters are specified. 
        :param str intersects: GeoJSON geometry to search by.  Only STAC items whose geometries intersect this geometry are selected. When performing a spatial search specify either of the parameters \"bbox\" of \"intesects\", but not both. 
        :param str filter: A cql2-text filter expression for filtering items. You can filter on any property inside a STAC item's \"properties\" object.  While STAC items have a \"datetime\" property you should use the search operation's \"datetime\" parameter for searching by it, and not use the \"filter\" parameter for searching by datetime. 
        :param str sortby: An array of property names, prefixed by either \"+\" for ascending or \"-\" for descending. If no prefix is provided, \"+\" is assumed. 
        :param int limit: Maximum number of items to return
        :param int page: Page number to retrieve.  First page is numbered 1. 
        :return: ItemCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sub_catalog_id', 'collection_id', 'bbox', 'search_datetime', 'ids', 'intersects', 'filter', 'sortby', 'limit', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_sub_catalog_collection_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sub_catalog_id' is set
        if ('sub_catalog_id' not in params or
                params['sub_catalog_id'] is None):
            raise ValueError("Missing the required parameter `sub_catalog_id` when calling `list_sub_catalog_collection_items`")  # noqa: E501
        # verify the required parameter 'collection_id' is set
        if ('collection_id' not in params or
                params['collection_id'] is None):
            raise ValueError("Missing the required parameter `collection_id` when calling `list_sub_catalog_collection_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sub_catalog_id' in params:
            path_params['subCatalogId'] = params['sub_catalog_id']  # noqa: E501
        if 'collection_id' in params:
            path_params['collectionId'] = params['collection_id']  # noqa: E501

        query_params = []
        if 'bbox' in params:
            query_params.append(('bbox', params['bbox']))  # noqa: E501
        if 'search_datetime' in params:
            query_params.append(('datetime', params['search_datetime']))  # noqa: E501
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
        if 'intersects' in params:
            query_params.append(('intersects', params['intersects']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sortby' in params:
            query_params.append(('sortby', params['sortby']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/geo+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/catalogs/{subCatalogId}/collections/{collectionId}/items', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ItemCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_sub_catalog_collections(self, sub_catalog_id, **kwargs):  # noqa: E501
        """List Sub-Catalog Collections  # noqa: E501

        List the collections that belong to a Sub-Catalog   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_sub_catalog_collections(sub_catalog_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sub_catalog_id: Identifier (name) of a specific collection (required)
        :param str sortby: An array of property names, prefixed by either \"+\" for ascending or \"-\" for descending. If no prefix is provided, \"+\" is assumed. 
        :param int limit: Maximum number of collections to return
        :param int page: Page number to retrieve.  First page is numbered 1. 
        :return: Collections
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_sub_catalog_collections_with_http_info(sub_catalog_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_sub_catalog_collections_with_http_info(sub_catalog_id, **kwargs)  # noqa: E501
            return data

    def list_sub_catalog_collections_with_http_info(self, sub_catalog_id, **kwargs):  # noqa: E501
        """List Sub-Catalog Collections  # noqa: E501

        List the collections that belong to a Sub-Catalog   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_sub_catalog_collections_with_http_info(sub_catalog_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sub_catalog_id: Identifier (name) of a specific collection (required)
        :param str sortby: An array of property names, prefixed by either \"+\" for ascending or \"-\" for descending. If no prefix is provided, \"+\" is assumed. 
        :param int limit: Maximum number of collections to return
        :param int page: Page number to retrieve.  First page is numbered 1. 
        :return: Collections
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sub_catalog_id', 'sortby', 'limit', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_sub_catalog_collections" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sub_catalog_id' is set
        if ('sub_catalog_id' not in params or
                params['sub_catalog_id'] is None):
            raise ValueError("Missing the required parameter `sub_catalog_id` when calling `list_sub_catalog_collections`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sub_catalog_id' in params:
            path_params['subCatalogId'] = params['sub_catalog_id']  # noqa: E501

        query_params = []
        if 'sortby' in params:
            query_params.append(('sortby', params['sortby']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/catalogs/{subCatalogId}/collections', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Collections',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_sub_catalogs(self, **kwargs):  # noqa: E501
        """List top level Maxar Sub-Catalogs  # noqa: E501

        View the available Maxar Sub-Catalogs that can be navigated as a self-contained STAC catalog   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_sub_catalogs(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sortby: An array of property names, prefixed by either \"+\" for ascending or \"-\" for descending. If no prefix is provided, \"+\" is assumed. 
        :param int limit: Maximum number of collections to return
        :param int page: Page number to retrieve.  First page is numbered 1. 
        :return: Collections
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_sub_catalogs_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_sub_catalogs_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_sub_catalogs_with_http_info(self, **kwargs):  # noqa: E501
        """List top level Maxar Sub-Catalogs  # noqa: E501

        View the available Maxar Sub-Catalogs that can be navigated as a self-contained STAC catalog   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_sub_catalogs_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sortby: An array of property names, prefixed by either \"+\" for ascending or \"-\" for descending. If no prefix is provided, \"+\" is assumed. 
        :param int limit: Maximum number of collections to return
        :param int page: Page number to retrieve.  First page is numbered 1. 
        :return: Collections
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sortby', 'limit', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_sub_catalogs" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sortby' in params:
            query_params.append(('sortby', params['sortby']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/catalogs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Collections',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_sub_catalog_search(self, sub_catalog_id, **kwargs):  # noqa: E501
        """Search Sub-Catalog STAC items with filtering.  # noqa: E501

        Retrieve items matching filters in a sub-catalog.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_sub_catalog_search(sub_catalog_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sub_catalog_id: Identifier (name) of a specific collection (required)
        :param SearchBody body:
        :return: ItemCollectionPost
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_sub_catalog_search_with_http_info(sub_catalog_id, **kwargs)  # noqa: E501
        else:
            (data) = self.post_sub_catalog_search_with_http_info(sub_catalog_id, **kwargs)  # noqa: E501
            return data

    def post_sub_catalog_search_with_http_info(self, sub_catalog_id, **kwargs):  # noqa: E501
        """Search Sub-Catalog STAC items with filtering.  # noqa: E501

        Retrieve items matching filters in a sub-catalog.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_sub_catalog_search_with_http_info(sub_catalog_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sub_catalog_id: Identifier (name) of a specific collection (required)
        :param SearchBody body:
        :return: ItemCollectionPost
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sub_catalog_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_sub_catalog_search" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sub_catalog_id' is set
        if ('sub_catalog_id' not in params or
                params['sub_catalog_id'] is None):
            raise ValueError("Missing the required parameter `sub_catalog_id` when calling `post_sub_catalog_search`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sub_catalog_id' in params:
            path_params['subCatalogId'] = params['sub_catalog_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/geo+json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/catalogs/{subCatalogId}/search', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ItemCollectionPost',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
